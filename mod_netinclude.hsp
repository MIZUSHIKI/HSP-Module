/* /////////////////////////////////////////////////////////////////////////////

#netincludeモジュール
--------------------------------------------------------------------------------
%dll ; モジュール名 
mod_netinclude
%ver ; バージョン 
3.3
%date ; 更新日 
2024/1/18
%author ; 著作者 
MIZUSHIKI

*/ /////////////////////////////////////////////////////////////////////////////
#ifndef __mod_netinclude__
#define __mod_netinclude__
;メインスクリプト内の #netinclude しか認識しません。
#ifdef _debug
;デバッグ時のみ #netinclude 処理を実行
#include "hspinet.as" ;デバッグ時の2つのincludeは我慢してもらう。しか・・・
#include "mod_regexp.as"
#uselib "kernel32.dll" ;*.ax取得の際に更新日時確認のため
#func CreateFile@@ "CreateFileA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
#func GetFileTime@@ "GetFileTime" sptr,sptr,sptr,sptr
#func CloseHandle@@ "CloseHandle" sptr
#define netinclude(%1,%2=0,%3=0,%4=0) addition %1*
	a@@="hsptmp" ;#addition(#include) の右側は「%c exist %1」とか繋げても一切反応しないから hsptmp を読みに行く。(命令が成立すると右側が無視される) 
	exist a@@
	if strsize<0{
		// min版: VSCodeなどhsptmpを生まない場合はスクリプトファイル(__file__)から読みだす
		;a@@=__file__
		// 通常版: 外部モジュール内で__file__を使ってもそのモジュールのファイル名しか出せないからaxファイルからファイル名読み出しを試みる
		a@@ = ""
		file@@ = ""
		notesel files@@
		dirlist files@@, "*.ax", 1
		_FILETIME@@ = 0, 0 ;更新日時を確認して一番新しいaxファイルを探す
		repeat stat
			noteget _file@@, cnt
			CreateFile@@ _file@@, $80000000, $00000001, 0, $00000003, $00000080, 0
			hFile@@ = stat
			dim FILETIME@@, 2
			GetFileTime@@ hFile@@, 0, 0, varptr(FILETIME@@)
			if FILETIME@@.1 > _FILETIME@@.1 || (FILETIME@@.1 == _FILETIME@@.1 && FILETIME@@.0 > _FILETIME@@.0) {
				_FILETIME@@ = FILETIME@@.0, FILETIME@@.1
				file@@ = _file@@
			}
			CloseHandle@@ hFile@@
		loop
		noteunsel
		exist file@@
		if strsize > 32 { ;少なくともファイルヘッダのmax_dsまでを持つ
			sdim buf@@, 32
			bload file@@, buf@@, 32, 0
			if lpeek(buf@@, 0) == 0x33505348 { ;HSP3
				size@@ = lpeek(buf@@, 28) ;max_ds
				index@@ = lpeek(buf@@, 24) ;pt_ds
				sdim buf@@, size@@
				bload file@@, buf@@, size@@, index@@ : index@@ = 0
				repeat
					if index@@ >= size@@ : break
					dupptr _buf@@, varptr(buf@@) + index@@, 2, 2 : index@@ += strlen(_buf@@) + 1 ;一文字列読み込んだ。次のindexを指しておく
					if getpath(_buf@@,18) != ".hsp" : continue ;Data Segment(文字列などの固定データ)の中で最初に出てきた.\*.hsp(またはdir_cur+\*.hsp)が実行開始スクリプトファイルではないかと推測
					if wpeek(_buf@@) != 0x5C2E && getpath(_buf@@,32) != dir_cur+"\\" : continue
					a@@ = _buf@@
					break
				loop
				if a@@ != "" {
					notesel a@@
					noteload a@@
					noteunsel
				}
				sdim buf@@ ;メモリ解放
			}
		}
		// /通常版
	}else {
		notesel a@@
		noteload a@@
		noteunsel
	}
	i@@="(\\s*,\\s*\"(.*?)\")?"
	b@@="0" ;hspinet初期化済みかどうかのフラグ
	y@@="#netinclud" ;#netincludeの文字出現回避の必要があるため末尾1文字カット
	matches a@@,a@@,y@@+{"e\\s*"(net/|https?)?(.+)"\\s*/\\s*,?\\s*(\\w*)(\n)?\\s*;*/*"}+i@@+i@@
	w@@=dir_exe+"\\common\\"
	repeat stat
		a@@.cnt="0" ;ダウンロードしないフラグを立てておく
		x@@=w@@
		v@@=a@@.cnt.1+a@@.cnt.2
		if"current"=a@@.cnt.3 : x@@=""
		exist x@@+v@@ ;ファイルの存在を確認。ダウンロード済みなら何もしない
		if strsize<0{ ;a@@.cnt.0=ダウンロードフラグ / m@@,n@@;カウント
			if""!b@@{
				netinit ;ここでhspinetの初期化をしてしまう
				b@@=""
			}
			a@@.cnt="" ;"0"を消してダウンロードするフラグにする
			//common,currentが入り乱れててもそれぞれ塊に出来るようにa@@.cnt.3に識別番号を入れている
			if""=x@@{
				a@@.cnt.3="2"
				m@@++ ;m@@はcommonにダウンロードする数。
			}else{
				a@@.cnt.3="1"
				n@@++ ;n@@はcurrentにダウンロードする数。
			}
		}
	loop
	if n@@+m@@{ ;common,currentのどちらかにダウンロードする
		s@@="","",""
		z@@="ダウンロード"
		repeat 2,1
			i@@=cnt ;cnt==1のときcurrentを処理。cnt==2のときcommonを処理
			foreach a@@
				if"0"=a@@.cnt{ continue } ;ダウンロードしないフラグ
				if""+i@@!a@@.cnt.3{ continue } ;currentとcommonの振り分け
				if"net/"=a@@.cnt.1{ ;登録されているモジュールデータを扱う
					if""=b@@{ ;登録データを取得
						neturl"https\://timetag.main.jp/HSP3NetModules/netm" ;\は掲示板に書いた文字列がリンクにされるのを防ぐ為
						netrequest_get"od.php?req=data"
						do : wait 5 : netexec n@@ : until n@@
						netgetv b@@ ;受信データ
						matches b@@,b@@,"^(.*?)\t(.*?)$" ;配列に入れ直す
						j@@=stat
					}
					a@@.cnt="0" ;ダウンロードしないフラグを立てて登録データ内に該当モジュールが存在するか確認
					k@@=cnt
					repeat j@@
						if getpath(b@@.cnt.1,16)=getpath(a@@.k@@.2,16){ ;モジュールがあった。
							a@@.k@@=b@@.cnt.2 ;a@@.cntにGitHubリポジトリ名。
							a@@.k@@.2=b@@.cnt.1 ;netloadで大文字小文字問われるのでa@@.cnt.2を登録データ名に置き換え
							break
						}
					loop
					if"0"=a@@.cnt{ continue } ;モジュールが無かったら無視する
					s@@.i@@+=">net/"+a@@.cnt.2+" ["+a@@.cnt+"]\n" ;ダウンロード予定のデータ
				}else{ ;リポジトリ込みで指定されているか、httpダウンロードか
					s@@.i@@+=">"+a@@.cnt.1+a@@.cnt.2+"\n" ;ダウンロード予定のデータ
				}
			loop
		loop
		if""!s@@.1{
			s@@+=w@@+"\n\nに\n\n"+s@@.1
			if""!s@@.2{
				s@@+="\nを":s@@+=z@@+"、\n-----\n\n"
			}
		}
		y@@+="e"
		if""=s@@.1+s@@.2{
			dialog"モジュールデータが見つかりませんでした",1,y@@ : end
		}
		if""!s@@.2{
			s@@+=dir_cur+"\n\nに\n\n"+s@@.2
		}
		dialog s@@+"\nを"+z@@+"します。",2,y@@
		if stat=6{
			x@@=dir_cur
			s@@=""
			; ==この時点で====== [登録データ  ] == [リポジトリ込み指定   ] == [ネット上から切り出し ] ================== ;
			; a@@.cnt.0 = "0" or "netmod_REPOS" or ""                      or ""                                         ;
			; a@@.cnt.1 =        "net/"         or ""                      or "https?"                                   ;
			; a@@.cnt.2 =        "ModName.hsp"  or "REPOS/FLD/ModName.hsp" or "/url/dir#/ModName.hsp"                    ;
			; a@@.cnt.3 = "1" or "2" (currentキーワードの有無)                                                           ;
			; a@@.cnt.4 = (使わない)                                                                                     ;
			; a@@.cnt.5 = (使わない)                                                                                     ;
			; a@@.cnt.6 =                                              ""  or "正規表現文字列"                           ;
			; a@@.cnt.7 = (使わない)                                                                                     ;
			; a@@.cnt.8 =                                              ""  or NKF変換/HTMLデコード オプション            ;
			; ========================================================================================================== ;
			foreach a@@
				if"0"=a@@.cnt{ continue }
				if"1"=a@@.cnt.3{ chdir w@@ }
				a@@.cnt.3=a@@.cnt.1+":/" ;http(s):/ を作っておく。
				a@@.cnt.1+=a@@.cnt.2
				split a@@.cnt.1,"/",b@@ ;URL(ディレクトリ)構造分解
				repeat stat-1 ;深い階層を作っていく
					dirlist i@@,b@@.cnt,5 ;フォルダ存在確認
					if stat=0{ mkdir b@@.cnt } ;フォルダが存在しないなら作る
					chdir b@@.cnt ;カレントディレクトリを1階層深くに移動
				loop
				a@@.cnt+=a@@.cnt.2
				j@@=a@@.cnt.8 ;j@@はminで短くなる用に
				if$70747468!lpeek(a@@.cnt.1){ ;http(s)以外のときはGitHubの生データURL。
					a@@.cnt.3="https\://raw.githubusercontent.com/" ;\は掲示板に書いた文字列がリンクにされるのを防ぐ為
				}
				neturl replace(replace(a@@.cnt.3+a@@.cnt,"#.*$",""),"？","?") ;モジュール(またはネットのページを)ダウンロード
				netrequest_get""
				do:wait 5:netexec n@@ : until n@@
				netgetv b@@ ;受信データ
				if n@@<0{ ;netexecからのエラー。404とかは拾えてない
					s@@+="\n>"+a@@.cnt
				}else{
					if""!j@@{
						nkfcnv b@@,b@@,j@@,,stat ;NKF変換/HTMLデコード オプションがあれば変換する
					}
					if""!a@@.cnt.6{
						b@@=submatch(b@@,a@@.cnt.6,,1) ;ネットのページの一部からモジュールを切り出したいときの正規表現
					}
					m@@=getpath(a@@.cnt,8)
					notesel b@@
					notesave m@@ ;モジュールファイルの保存
					if instr(j@@,0,"D")!-1{ ;どうしてもHTMLエンティティをデコードしたかったのでD隠しコマンドでpowershellを利用してHTMLデコード。ついでに<br>も改行化
						m@@=dir_cur+"/"+m@@
						k@@="powershell \"Add-Type -AssemblyName System.Web;$s=Get-Content '"+m@@+"' -Raw;$d=[S"
						k@@+="ystem.Web.HttpUtility]::HtmlDecode($s.Replace('<br>',\\\"`r`n\\\"));Set-Content -Path '"+m@@+"' $d;\""
						exec k@@,2
					}
				}
				chdir x@@ ;深い階層まで潜っていたのでカレントディレクトリに戻す
			loop
			if""!s@@{
				dialog z@@+"失敗\n"+s@@ : end
			}
			dialog z@@+"完了。\n再実行して下さい" : end ;ダウンロードしたらもう一度実行してもらう
		}
	}
#else
;実行ファイル作成時はただの #include になる
#define netinclude(%1,%2=0,%3=0,%4=0) include %1
#endif
;↑ ここをminバージョン化
#ifdef _debug
#module mod_netinclude
#define NETMOD_PHPFILE "https://timetag.main.jp/HSP3NetModules/netmod.php"

#deffunc netinclude_GetData
	netinit@ ;hspinetの初期化
	neturl@ NETMOD_PHPFILE + "?req=data"
	netrequest_get@ ""
	repeat
		netexec@ res ;結果待ちのためのループ
		if res{break}
		await 50
	loop
	netgetv@ buf ;受信データを代入
	screen ginfo(25)
	title "#netinclude - netinclude_GetData"
	mesbox buf, ginfo_dispx, ginfo_dispy, 12
	stop
	return
#deffunc netinclude_PostModule str p1
	p1_ = p1
	urlencode@ ep1, p1_
	netinit@ ;hspinetの初期化
	neturl@ NETMOD_PHPFILE + "?req=post&hsp="+ep1
	netrequest_get@ ""
	repeat
		netexec@ res ;結果待ちのためのループ
		if res{break}
		await 50
	loop
	netgetv@ buf ;受信データを代入
	screen ginfo(25)
	title "#netinclude - netinclude_PostModule"
	if strmid( buf, 0, 7 ) = "false: " {
		getstr errorMessage, buf, 7, ';'
		switch errorMessage
		case "not_found__datafile"
			buf+="\n\nデータファイルが見つかりませんでした。（HSP3NetModules管理者に問い合わせください。）"
			swbreak
		case "not_found__module_file"
			buf+="\n\nGitHub内で指定されたモジュールを見つけることができませんでした。"
			swbreak
		case "bad__request"
			buf+="\n\nリクエスト文字列が正しくありません。（HSP3NetModules管理者に問い合わせください。）"
			swbreak
		case "bad__module_name"
			buf+="\n\nモジュール名に登録できない文字が入っています。(または、拡張子に.hsp/.asが使われていません。)"
			swbreak
		case "arledy__module_name"
			buf+="\n\nすでにそのモジュール名は登録されています。モジュール名を変更して登録してください。"
			swbreak
		case "failure__update"
			buf+="\n\nアップデートに失敗しました。"
		swend
	}
	mesbox buf, ginfo_dispx, ginfo_dispy, 12
	stop
	return
#deffunc netinclude_DeleteModule str p1
	p1_ = p1
	urlencode@ ep1, p1_
	netinit@ ;hspinetの初期化
	neturl@ NETMOD_PHPFILE + "?req=delete&hsp="+ep1
	netrequest_get@ ""
	repeat
		netexec@ res ;結果待ちのためのループ
		if res{break}
		await 50
	loop
	netgetv@ buf ;受信データを代入
	screen ginfo(25)
	title "#netinclude - netinclude_DeleteModule"
	if strmid( buf, 0, 7 ) = "false: " {
		getstr errorMessage, buf, 7, ';'
		switch errorMessage
		case "not_found__datafile"
			buf+="\n\nデータファイルが見つかりませんでした。（HSP3NetModules管理者に問い合わせください。）"
			swbreak
		case "found__module_file"
			buf+="\n\nモジュールファイルが見つかりました。netinclueデータから削除したい場合はモジュールファイルをGitHubから削除する必要があります。"
			swbreak
		case "bad__request"
			buf+="\n\nリクエスト文字列が正しくありません。（HSP3NetModules管理者に問い合わせください。）"
			swbreak
		case "bad__module_name"
			buf+="\n\nモジュール名に登録できない文字が入っています。"
			swbreak
		case "not_found__module_name"
			buf+="\n\nデータファイルの中に指定されたモジュール名が見つかりませんでした。"
			swbreak
		case "bad__github_access"
			buf+="\n\nデータの特殊削除をしようとしましたが、GitHubのアクセスまたは情報の取得に失敗しました。"
			swbreak
		swend
	}
	mesbox buf, ginfo_dispx, ginfo_dispy, 12
	stop
	return
#global
#endif
#endif


/* // hs ファイル // ///////////////////////////////////////////////////////////

%type
拡張命令
%note
mod_netinclude.hspをインクルードすること。
%url
https://github.com/MIZUSHIKI/HSP-Module
%port
Win


%index
#netinclude
インターネットを使用してGitHubからモジュールをダウンロード

%prm
"module_name"/,p1,p2,p3
"module_name"/ : "モジュール名文字列"/
p1(省略可) : currentキーワード
p2(省略可) : ネットページ抽出用 "正規表現文字列"
p3(省略可) : NKF変換/HTMLデコード オプション

%inst
p1で指定したモジュールがcommonフォルダに存在しない場合、GitHubからダウンロードします。
すでにモジュールがダウンロードされている場合は#includeされます。
p1モジュール名文字列の末尾には必ず / (スラッシュ) を記述する必要があります。

HSP3NetModulesデータベースに登録してあるモジュールはGitHubのURLの一部を省略して「net/」と書くことで利用ができます。

#netinclude "net/mod_netinclude.hsp"/

HSP3NetModulesデータベースに登録されていないものもリポジトリ名まで入力することでダウンロードできます。

#netinclude "MIZUSHIKI/HSP-Module/master/mod_netinclude.hsp"/
(https://raw.githubusercontent.com/MIZUSHIKI/HSP-Module/master/mod_netinclude.hsp : GitHub-RawファイルURL)

HSP3NetModulesデータベースに何が登録されているかは netinclude_GetData で取得できます。
また、netinclude_PostModule命令で誰でも自由にデータベースにモジュールを登録することができます。

p1に『current』と記述するとcommonフォルダでなくカレントフォルダにモジュールをダウンロードします。

また、"モジュール名文字列"にネットのページを指定することができて、p2に"正規表現文字列"を指定することでページの一部を切り出してファイルとして保存、そのまま利用することが出来ます。
・「?」はファイル名に使えないので大文字の「？」に置き換えてください。
・URL末尾に「#/モジュールファイル名」と書くのがオススメです。

【 例 】
html{
<pre style="background-color: #F0F0F0;">
#netinclude "https/suwa.pupu.jp/HSP/modules/mod_HighDpi_kakkokari.hsp"/, current
</pre>
}html

html{
<pre style="background-color: #F0F0F0;">
#netinclude "http/hsp.tv/play/pforum.php？mode=pastwch&num=18983#/sample_PreventMultiple.hsp"/, current, "&lt;pre(?![\s\S]*&lt;pre[\s\S]*?WM_USER_DUPEXEC[\s\S]*?&lt;/pre)>([\s\S]*?WM_USER_DUPEXEC[\s\S]*?)&lt;/pre", "EsD"
</pre>
}html

p3オプションは nkfcnv のオプション値と同じものです。文字コードの指定が必要な場合に使用してください。
隠しオプションとして "D" を指定することができHTMLエンティティ(#quot;等)の展開と<br>の改行化を行えます。

p2正規表現のカンマ前にのみ改行を入れられます。文頭に「;」か「//」を入れてコメントアウトしてください。コメントになっていても netinclude はこの行を認識/処理しています。
html{
<pre style="background-color: #F0F0F0;">
#netinclude "http/hsp.tv/play/pforum.php？mode=pastwch&num=18983#/sample_PreventMultiple.hsp"/, current
&#059; , "&lt;pre(?![\s\S]*&lt;pre[\s\S]*?WM_USER_DUPEXEC[\s\S]*?&lt;/pre)>([\s\S]*?WM_USER_DUPEXEC[\s\S]*?)&lt;/pre", "EsD"
</pre>
}html

※ 注意点
html{
<ul>
<li>#netinclude はHSP実行(F5)を開始するメインスクリプト上でしか動きません。</li>
<li>#netincludeを使用するとメインスクリプト内で複数行コメントアウトが使用できなくなります。（抜け道裏技あり）</li>
</ul>
}html

%sample
#include "mod_netinclude.hsp"

#netinclude "net/ObjPosMod.hsp"/

//【下記は裏技】#netinclude後に、この2行があれば複数行コメントが使えるようになります（「* /」の真ん中の空白は消してコメントアウト末尾の形に直してください）
#undef netinclude /*_* /
#ifndef netinclude

%href
netinclude_GetData
netinclude_PostModule
netinclude_DeleteModule

%group
プログラム制御命令

%index
netinclude_GetData
HSP3NetModulesデータベースに登録されているモジュール情報を表示

%prm

%inst
HSP3NetModulesデータベースに登録されているモジュール情報をダウンロードして画面に表示
スクリプトはこの行でstopされます。

%sample
#include "mod_netinclude.hsp"

netinclude_GetData

%href
#netinclude
netinclude_PostModule
netinclude_DeleteModule

%group
プログラム制御命令

%index
netinclude_PostModule
HSP3NetModulesデータベースにモジュール情報を登録

%prm
"GitHub_URL/module_name"
"GitHub_URL/module_name" : "GitHubのURLを含めたモジュール名文字列"/

%inst
HSP3NetModulesデータベースにモジュール情報を登録します。

例えば、GitHubのRawファイルURLが
https://raw.githubusercontent.com/MIZUSHIKI/HSP-Module/master/SAMPLE/FloppyWord.hsp
の場合、
netinclude_PostModule "MIZUSHIKI/HSP-Module/master/SAMPLE/FloppyWord.hsp"
で登録すると末尾の「FloppyWord.hsp」がモジュール名データとして登録され、「MIZUSHIKI/HSP-Module/master/SAMPLE/」までが省略対象とされます。
上記の場合、
#netinclude "net/FloppyWord.hsp"/
でダウンロードさせることができます。

この登録するモジュール名(省略する部分)は、二重のスラッシュを記述することで制御できます。
例えば、
netinclude_PostModule "MIZUSHIKI/HSP-Module/master//SAMPLE/FloppyWord.hsp"
とした場合は「SAMPLE/FloppyWord.hsp」がモジュール名データとして登録され、「MIZUSHIKI/HSP-Module/master/」までが省略対象となり、
#netinclude "net/SAMPLE/FloppyWord.hsp"/
でダウンロードさせることができます。

%sample
#include "mod_netinclude.hsp"

netinclude_PostModule "MIZUSHIKI/HSP-Module/master/mod_netinclude.hsp"
//登録に成功するとレポート画面に「success」と表示されます。

%href
#netinclude
netinclude_GetData
netinclude_DeleteModule

%group
プログラム制御命令

%index
netinclude_DeleteModule
HSP3NetModulesデータベースからモジュール情報を削除

%prm
"GitHub_URL/module_name"
"GitHub_URL/module_name" : "GitHubのURLを含めたモジュール名文字列"

%inst
HSP3NetModulesデータベースからモジュール情報を削除します。
ただし、netinclude_DeleteModuleを実行する前にGitHub内の該当するモジュールを削除する必要があります。

もしくは、モジュールが置いてあるリポジトリの説明欄(About項目のDescription)に一時的に「netinclude_DELETE=モジュール名」と書いて、netinclude_DeleteModuleを実行することでも削除することができます。

これらの条件が付いているのは、いたずら目的等で勝手にデータベースから情報を削除されてしまうことを防ぐためです。

%sample
#include "mod_netinclude.hsp"

netinclude_DeleteModule "MIZUSHIKI/HSP-Module/master/mod_netinclude.hsp"
//削除に成功するとレポート画面に「success」と表示されます。

%href
#netinclude
netinclude_GetData
netinclude_PostModule

%group
プログラム制御命令

*/ // hs ファイル // ///////////////////////////////////////////////////////////
